# Workflow for Submodule Repositories (backend, ai, email-handler, interview, interview-ui)
# File: .github/workflows/sync-issue-close.yml

name: Sync Issue Close to Release Repo

on:
  issues:
    types: [closed]

jobs:
  sync-to-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue was created from release repo
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RELEASE_REPO_PAT }}
          script: |
            const currentIssue = context.payload.issue;
            const issueBody = currentIssue.body || '';
            
            // Extract the linked release issue number from the issue body
            const releaseIssueMatch = issueBody.match(/Linked Release Issue: #(\d+)/);
            
            if (!releaseIssueMatch) {
              console.log('This issue was not created from release repo. Skipping.');
              return;
            }
            
            const releaseIssueNumber = parseInt(releaseIssueMatch[1]);
            const releaseRepoName = 'sona-test-1'; // Change this to your release repo name
            const owner = context.repo.owner;
            
            console.log(`Found linked release issue: ${releaseRepoName}#${releaseIssueNumber}`);
            
            try {
              // Get the release repo issue
              const releaseIssue = await github.rest.issues.get({
                owner: owner,
                repo: releaseRepoName,
                issue_number: releaseIssueNumber
              });
              
              // Check if the release issue is already closed
              if (releaseIssue.data.state === 'closed') {
                console.log(`Release issue #${releaseIssueNumber} is already closed.`);
                return;
              }
              
              // Get all comments on the release issue to find other linked issues
              const comments = await github.rest.issues.listComments({
                owner: owner,
                repo: releaseRepoName,
                issue_number: releaseIssueNumber
              });
              
              // Extract all linked issues from comments
              const linkedIssues = [];
              const syncTrackerRegex = /<!-- SYNC_TRACKER: ([^:]+):(\d+) -->/g;
              
              for (const comment of comments.data) {
                const matches = [...comment.body.matchAll(syncTrackerRegex)];
                for (const match of matches) {
                  linkedIssues.push({
                    repo: match[1],
                    number: parseInt(match[2])
                  });
                }
              }
              
              console.log(`Found ${linkedIssues.length} linked issues`);
              
              // Check if all linked issues are closed
              let allClosed = true;
              for (const linked of linkedIssues) {
                try {
                  const linkedIssue = await github.rest.issues.get({
                    owner: owner,
                    repo: linked.repo,
                    issue_number: linked.number
                  });
                  
                  if (linkedIssue.data.state === 'open') {
                    allClosed = false;
                    console.log(`Issue ${linked.repo}#${linked.number} is still open`);
                    break;
                  }
                } catch (error) {
                  console.log(`Could not check issue ${linked.repo}#${linked.number}: ${error.message}`);
                }
              }
              
              // Close the release issue if all linked issues are closed
              if (allClosed && linkedIssues.length > 0) {
                await github.rest.issues.update({
                  owner: owner,
                  repo: releaseRepoName,
                  issue_number: releaseIssueNumber,
                  state: 'closed'
                });
                
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: releaseRepoName,
                  issue_number: releaseIssueNumber,
                  body: `ðŸŽ‰ Automatically closed: All linked submodule issues have been closed.\n\nClosed by: ${context.repo.repo}#${currentIssue.number}`
                });
                
                console.log(`Successfully closed release issue #${releaseIssueNumber}`);
              } else if (linkedIssues.length > 0) {
                // Add a comment noting that this submodule issue was closed
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: releaseRepoName,
                  issue_number: releaseIssueNumber,
                  body: `âœ… Submodule issue closed: [${context.repo.repo}#${currentIssue.number}](${currentIssue.html_url})`
                });
                
                console.log('Not all linked issues are closed yet.');
              }
              
            } catch (error) {
              console.error('Error syncing issue closure:', error);
            }
